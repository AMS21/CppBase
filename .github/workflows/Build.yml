name: Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.cfg.os }}

    env:
      CMAKE_GENERATOR: Ninja
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2

    strategy:
      fail-fast: false
      matrix:
        cfg:
          # Ubuntu gcc
          - { os: ubuntu-latest, compiler: g++, compiler_version: "4.9" }
          - { os: ubuntu-latest, compiler: g++, compiler_version: "5" }
          - { os: ubuntu-latest, compiler: g++, compiler_version: "6" }
          - { os: ubuntu-latest, compiler: g++, compiler_version: "7" }
          - { os: ubuntu-latest, compiler: g++, compiler_version: "8" }
          - { os: ubuntu-latest, compiler: g++, compiler_version: "9" }
          - { os: ubuntu-latest, compiler: g++, compiler_version: "10" }
          # Ubuntu clang
          #- { os: ubuntu-latest, compiler: clang++, compiler_version: "3.5" }
          #- { os: ubuntu-latest, compiler: clang++, compiler_version: "3.6" }
          #- { os: ubuntu-latest, compiler: clang++, compiler_version: "3.7" }
          #- { os: ubuntu-latest, compiler: clang++, compiler_version: "3.8" }
          #- { os: ubuntu-latest, compiler: clang++, compiler_version: "3.9" }
          #- { os: ubuntu-latest, compiler: clang++, compiler_version: "4.0" }
          - { os: ubuntu-latest, compiler: clang++, compiler_version: "5.0" }
          - { os: ubuntu-latest, compiler: clang++, compiler_version: "6.0" }
          - { os: ubuntu-latest, compiler: clang++, compiler_version: "7" }
          - { os: ubuntu-latest, compiler: clang++, compiler_version: "8" }
          - { os: ubuntu-latest, compiler: clang++, compiler_version: "9" }
          - { os: ubuntu-latest, compiler: clang++, compiler_version: "10" }
          # Windows 2016
          - { os: windows-2016, compiler: cl }
          - { os: windows-2016, compiler: g++ }
          - { os: windows-2016, compiler: clang++ }
          - { os: windows-2016, compiler: clang-cl }
          # Windows 2019
          - { os: windows-2019, compiler: cl }
          - { os: windows-2019, compiler: g++ }
          - { os: windows-2019, compiler: clang++ }
          - { os: windows-2019, compiler: clang-cl }

    steps:
      - uses: actions/checkout@v2

      - name: get-cmake
        uses: lukka/get-cmake@v3.17.1

      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          # Add required repositories

          # Required for libc6-dbg:i386 and g++-multilib packages which are
          # needed for x86 builds.
          sudo dpkg --add-architecture i386

          # clang-3.8 and earlier are not available in Bionic anymore so we get
          # them from the Xenial repositories instead. Same goes for g++-4.9
          sudo add-apt-repository "deb http://dk.archive.ubuntu.com/ubuntu/ xenial main"
          sudo add-apt-repository "deb http://dk.archive.ubuntu.com/ubuntu/ xenial universe"

          # Add clang repository for clang-10 and clang-9
          if [ "${{ matrix.cfg.compiler }}" = "clang++" ] && [ "${{ matrix.cfg.compiler_version }}" = "10" ] || [ "${{ matrix.cfg.compiler_version }}" = "9" ]; then
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${{ matrix.cfg.compiler_version }} main"
          fi

          # Update repo list
          sudo apt-get update -m

          # libc6-dbg:i386 is required for running valgrind on x86.
          sudo apt-get install ninja-build valgrind libc6-dbg:i386

          # Install clang
          if [ "${{ matrix.cfg.compiler }}" = "clang++" ]; then
            sudo apt-get install "clang-${{ matrix.cfg.compiler_version }}" g++-multilib -y
          fi

          # Install g++
          if [ "${{ matrix.cfg.compiler }}" = "g++" ]; then
            sudo apt-get install "g++-${{ matrix.cfg.compiler_version }}" "g++-${{ matrix.cfg.compiler_version }}-multilib" -y
          fi

          # export compiler
          echo "::set-env name=CXX::${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }}"

      - name: Install (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Install scoop
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          # Install ninja
          scoop install ninja --global

          # Install required compilers
          if ("${{ matrix.cfg.compiler }}".StartsWith("clang++")) {
            scoop install llvm --global
          }
          elseif ("${{ matrix.cfg.compiler }}" -eq "g++") {
            scoop install gcc --global
          }
          else {
            choco install vswhere
          }

          echo "::set-env name=CXX::${{ matrix.cfg.compiler }}"

          # Scoop modifies the PATH so we make the modified PATH global.
          echo "::set-env name=PATH::$env:PATH"

      - name: Add msbuild to PATH
        if: runner.os == 'Windows' && matrix.cfg.compiler == 'cl'
        uses: microsoft/setup-msbuild@v1.0.0

      - name: Configure build directory
        run: |
          mkdir build
          cd build
          cmake ..

      - name: Build & Test Debug x64
        run: |
          cd build
          # Configure cmake
          cmake -DCMAKE_BUILD_TYPE=Debug ..
          # Build
          cmake --build . --clean-first
          # Run tests
          ctest .

      - name: Build & Test Release x64
        run: |
          cd build
          # Configure cmake
          cmake -DCMAKE_BUILD_TYPE=Release ..
          # Build
          cmake --build . --clean-first
          # Run tests
          ctest .
